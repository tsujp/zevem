#+TITLE: zevem project information

* Building

** Zig Build Modes

Docs: https://ziglang.org/documentation/0.14.0/#toc-Build-Mode

| Mode         | Optimise  | Safety | Runtime Sp. | Repro. | Bin Size |
|--------------+-----------+--------+-------------+--------+----------|
| Debug        | Off       | On     | Slow        | No     | Large    |
| ReleaseFast  | On        | Off    | Fast        | Yes    | Large    |
| ReleaseSafe  | On        | On     | Medium      | Yes    | Large    |
| ReleaseSmall | On (size) | Off    | Medium      | Yes    | Small    |

** Zig Build System

Docs: https://ziglang.org/documentation/0.14.0/#Zig-Build-System
Docs: https://ziglang.org/learn/build-system/

* TODO Zig 0.14.0 Update & Notes

It currently does run correctly, but things like GPA being renamed and ArrayLists being unmanaged by default now and the like need to be accounted for.

Release notes: https://ziglang.org/download/0.14.0/release-notes.html

** Misc

- Non-aggregate types are those for which the ~==~ is allowed.
- Global variables can be initialised with the address of each other.
- ~@src~ (=std.builtin.SourceLocation=) has =module= field now.
- =std.c= re-org: https://ziglang.org/download/0.14.0/release-notes.html#stdc-Reorganization

Deprecation list: https://ziglang.org/download/0.14.0/release-notes.html#List-of-Deprecations

** TODO Language

*** Labelled Switch
https://ziglang.org/download/0.14.0/release-notes.html#Labeled-Switch

Already in-use, some central notes though:
- ~switch~ statement can be labeled, ~continue~ within such statements takes single operand which is treated as replacement for enclosing switch expressions operand thus explicitly stating the next prong to execute.
- Can ~break~ from labeled switch which terminates its evaluation causing it to result in the given value to ~break~. The ~break~ must be given the switch's label to target it similarly to breaking out of blocks.
- Labeled switches are *not* implicitly evaluated at comptime but such can be forced with the ~comptime~ keyword.
- Semantically equivalent to switch inside a loop where a variable tracks switch operand and said variable is modified in each prong to control the subsequent prong to be executed.

Labeled switch designed to improve code-generation for hot loops such as those which dispatch instructions.

If operand to ~continue~ is comptime-known it is translated to an unconditional branch; this is a "perfectly predicted" branch and is very fast.

If operand to ~continue~ is runtime-known each continue can become a seperate conditional branch (ideally via shared jump table) back to the same set of conditional branch targets. This aids the CPU branch predictor by associating different branch instructions and their prediction data.

Zig's tokeniser is 13% faster with labeled switches: https://github.com/ziglang/zig/pull/21367

**** TODO How to check and force that the jump table is shared for labeled switch runtime-known conditional branches?

Is the only implication of it NOT being shared that the binary size is larger due to duplicated jump tables? It should still be just as fast since it's the same jump table data-wise no?

*** TODO Decl Literals
https://ziglang.org/download/0.14.0/release-notes.html#Decl-Literals

READ NEXT AFTER TODOs CREATED.

*** TODO @export Operand Pointer
https://ziglang.org/download/0.14.0/release-notes.html#export-Operand-is-Now-a-Pointer

*** TODO @branchHint Replaces @setCold
https://ziglang.org/download/0.14.0/release-notes.html#New-branchHint-Builtin-Replacing-setCold

*** TODO Remove Anonymous Struct Types, Unify Tuples
https://ziglang.org/download/0.14.0/release-notes.html#Remove-Anonymous-Struct-Types-Unify-Tuples

*** @FieldType Builtin
https://ziglang.org/download/0.14.0/release-notes.html#FieldType-builtin

Similar to ~std.meta.FieldType~, give a type and the name of one of it's fields and get back the type of that field.

*** TODO @memcpy Rules Adjusted
https://ziglang.org/download/0.14.0/release-notes.html#memcpy-Rules-Adjusted

** TODO Standard Library

*** GeneralPurposeAllocator is now DebugAllocator
https://ziglang.org/download/0.14.0/release-notes.html#DebugAllocator

=GeneralPurposeAllocator= used to rely on compile-time known page size (now removed as nonsensical). Now rewritten to make fewer active mappings and have better performance it is also renamed =DebugAllocator=.

Note: initialise with ~.init~ declaration literal and not ~.{}~ now.

*** TODO SmpAllocator
https://ziglang.org/download/0.14.0/release-notes.html#SmpAllocator

*** TODO Allocator API
https://ziglang.org/download/0.14.0/release-notes.html#Allocator-API-Changes-remap

*** TODO Zon Parsing
https://ziglang.org/download/0.14.0/release-notes.html#ZON-Parsing-and-Serialization

*** TODO Runtime Page Size
https://ziglang.org/download/0.14.0/release-notes.html#Runtime-Page-Size

*** TODO process.Child.collectOutput API
https://ziglang.org/download/0.14.0/release-notes.html#processChildcollectOutput-API-Changed

*** LLVM Builder API
https://ziglang.org/download/0.14.0/release-notes.html#LLVM-Builder-API

Zig's LLVM bitcode builder is now available at =std.zig.llvm=. Note that everything in the =std.zig= namespace is an implementation detail of the Zig compiler and isn't subject to the same API stability and deprecation norms as the rest of =std=.

*** Unmanaged Containers
https://ziglang.org/download/0.14.0/release-notes.html#Embracing-Unmanaged-Style-Containers

- Managed container types (which internally associate an allocator for their lifetime) are deprecated and will be removed in the next Zig version (0.15.0).
- Unmanaged container types are now the norm and require passing (the same) allocator at every callsite where such a method requires it.
- Zig stdlib =ArrayHashMapWithAllocator= happens to have an implementation of a "traditional" managed-style approach which (I think) is intended for the future. Unsure if that will also be discouraged / deprecated in 0.15.0 (as in, within stdlib itself). As users we're free to create our own managed-style approaches.

*** Better Binary Search API
https://github.com/ziglang/zig/pull/20927

For: =std.sort.binarySort=, =std.sort.lowerBound=, =std.sort.upperBound=, and =std.sort.equalRange=.

*** std.hash_map Rehash Method
https://ziglang.org/download/0.14.0/release-notes.html#stdhash_map-gains-a-rehash-method

Currently unordered hash maps become slow when items are removed from them, in future Zig versions this will be fixed.

Array hash maps are free of this flaw.

** TODO Build System
https://ziglang.org/download/0.14.0/release-notes.html#Build-System
https://ziglang.org/learn/build-system/

READ THIS ONE WHEN DONE MAKING TODOs:
- File System Watching
- New Package Hash Format
- WriteFile Step
- RemoveDir Step
- Fmt Step

*** Creating Artifacts from Existing Modules
https://ziglang.org/download/0.14.0/release-notes.html#Creating-Artifacts-from-Existing-Modules

=Compile= steps can be created from existing =std.Build.Module= objects. Easier to re-use now, e.g. a module which is a dependency of another can more easily have a test step created for it.

New APIs change usage of =addExecutable=, =addTest= etc. No longer pass =root_source_file=, =target=, =optimize= (etc) directly but a =*std.Build.Module= to the =root_module= field with said module taking aforementioned options instead.

*** TODO Allow Packages to Expose Arbitrary LazyPaths by Name

*** addLibrary Function
https://ziglang.org/download/0.14.0/release-notes.html#addLibrary-Function

=addLibrary= replaces =addSharedLibrary= and =addStaticLibrary=.

** TODO Compiler
https://ziglang.org/download/0.14.0/release-notes.html#Compiler

- Comptime import ZON.
- tokenizer: simplification and spec conformance

** TODO Linker
https://ziglang.org/download/0.14.0/release-notes.html#Linker

** TODO Fuzzer
https://ziglang.org/download/0.14.0/release-notes.html#Fuzzer

** TODO UBSan Runtime
https://ziglang.org/download/0.14.0/release-notes.html#UBSan-Runtime

Maybe (if things like tracy or valgrind for whatever reason aren't good enough, which I doubt) how UBSan modifies things at compile time could be an approach for instrumentation etc etc. Again, doubt it since tracy/valgrind.

* Misc TODOs
:PROPERTIES:
:visibility: outline
:END:

** TODO Add custom EvmError errors and use those instead

Perhaps as a tagged enum? I forgot the proper term for this, have to double check notes. Either way want to replace the implicit error return of EVM.execute() from !void to somethin explicit.

** TODO Maybe a less verbose and/or more detailed tracing guide in zevem README

It's fine for now probably.

** TODO Perhaps bench the old decodeOp before the change to log opcode via tracy

Yeah some overhead is added but how much idk, use poop or something to retroactively do this. Circa 2025-04-01 is when change to decodeOp occured (with tracy addition and so on).

** TODO Add a just recipe for andrewrk's basic zig benchmark tool

It's called poop or something, get a recipe for that and execute it to start basic benchmarking shit.

** TODO Have a look at Zig's source code for labelled switch usage

As part of adding tracy have a look at any non-trivial ways Zig's own source is using labelled switches, mostly I'm curious about putting things like stack variable checks in what is currently decodeOp which is run as part of (almost) every continue statement. In that sense it functions similarly to the top of a while loop which is followed by a switch statement, except our usage of a labelled switch here keeps cpu branch predictability performance gains.

** TODO Finish Jam script

It's fine for now, mostly a skeleton and should probably symlink to a central one for sharing and/or make it a little CLI tool for easier consumption. We'll see.

** TODO Custom error added on POP instruction, but do we want such errors?

Do we expect that any bytecode given to us is free from such errors and simply crash hard if encountered or do we surface those to the host? The compiled code is already going to check since Zig by default provides that ~orelse unreachable~ if we don't specify anything. This could be a compile option (our custom errors) if there is in-fact any overhead and if in-fact we want to continue down that path.

Another thing to note is that.. what makes POP so special? What about DUP now.. what about every single other opcode? I think /for now/ I may remove the POP custom error logic because it feels like the compiler that is feeding us bytecode, or the adept user who is handwriting such, should be responsible for that.

Things like trying to expand memory and that being an error we do surface (RETURN/REVERT) because that's our job as the VM -- thus, a difference in semantics I suppose.

** TODO Comptime test generation for opcodes?

E.g. generate tests for all of the N-style opcodes PUSH-N, DUP-N etc. Doesn't really feel worth it versus literally writing them.

** TODO Test cases described in Zon?

Maybe something like:

#+begin_src zig
.{
    // .bc for bytecode, .s for stack .s.l stack length, .s.i stack items from top etc.
    .bc = "5f600a8100",
    .s = .{
        .l = 0,
        .i = .{ 0, 0xa }
    }
}
#+end_src

** TODO Containerfile appropriate for Linux hosts too

All the uid mapping shit probably not required on Linux hosts since it's not going macOS <==> Linux-VM <==> container with the macOS uid/gid being the ones we want to maintain.

** TODO Maybe change to using Just for project commands

Problem is when you want to do a lot of shell-stuff Just executes each line of the recipe in it's own shell so if you have variables, or need the output of a prior command you need to have a recipe that is basically a heredoc shell script by adding #!/usr/bin/env bash to it.. at that point I'd rather just use a shell script directly.

** TODO Fuzzing with AFL++

Haven't looked into fuzzing approaches yet; just found this while browsing other Zig things and it could be beneficial later: https://github.com/AFLplusplus/AFLplusplus and for Zig: https://github.com/kristoff-it/zig-afl-kit?tab=readme-ov-file

** Old project-todo.org file contents dumped within
:PROPERTIES:
:VISIBILITY: folded
:END:

- Tramp using which instead of looping to find commands (as container now has it?)
- Tramp environment variables for container?
- Tramp use workdir argument for podmancp (make my own external method since a lot of customiation wanted here).
- Tramp gpg-agent
- Tramp git config
- Tramp magit signed commits and authenticated git remotes
- Tramp per container history file (i.e. don't clobber general, global history file)
- Additionally, tramp history in its own history file to better distinguish user commands vs tramps?
- Tramp homedir for jam stuff, have it use a default username etc.

- What is this, looking for git repo? Stop it going up and up and up? seems to be when tramp runs `tramp_bundle_read_file_names` i.e. tramp-send-command (6) tramp_bundle_read_file_names
(
("/home/jammy/project/build.zig" t t nil)
("/home/jammy/project/.git" t t t)
("/home/jammy" t t t)
("/home/jammy/.git" nil nil nil)
("/.git" nil nil nil)
)

echo "("
while read file; do
    quoted=`echo "$file" | sed -e "s/\"/\\\\\\\\\"/"`
    printf "(%b" "\"$quoted\""
    if test -e "$file"; then printf " %b" t; else printf " %b" nil; fi
    if test -r "$file"; then printf " %b" t; else printf " %b" nil; fi
    if test -d "$file"; then printf " %b)
" t; else printf " %b)
" nil; fi
done
echo ")"
} 2>/dev/null; echo tramp_exit_status $?

so with tramp_bundle_read_file_names is vc.el asking it to check those paths? Cos it looks like the tramp command is GIVEN the paths /home/jammy/project/build.zig and /home/jammy/project/.git and /home/jammy and /home/jammy/.git and /.git but what is giving it those paths in the first place?

purpose of LOGNAME env var?

git --no-pager ls-files -c -z -- build.zig


Emacs environment replacement, what is $d used for after a remote connection has been established?


Better function for tramp_bundle_read_file_names called by tramp-maybe-send-script


tramp-maybe-open-connection   # Setup connection for
tramp-open-shell    # Opening remote shell
tramp-open-connection-setup-interactive-shell    # Setting up remote shell environment
							and # Setting default environment




Stretch goal:

- Email tramp-devel and suggest using printf instead of echo, and suggest using $() instead of `` syntax.



perl script completions, find out what these tuples are. The script it sends for tramp-send-command #tramp_perl_file_name_all_completions /home/jammy    example output is:
(
("./" "/home/jammy/." t t t)
("../" "/home/jammy/.." t t t)
(".bash_history" "/home/jammy/.bash_history" nil t t)
(".bashrc" "/home/jammy/.bashrc" nil t t)
(".bash_profile" "/home/jammy/.bash_profile" nil t t)
("project/" "/home/jammy/project" t t t)
(".bash_logout" "/home/jammy/.bash_logout" nil t t)
)

and the script is:
\perl -e '
$dir = $ARGV[0];
if ($dir ne "/") {
  $dir =~ s#/+$##;
}
opendir(d, $dir) || die("$dir: $!\nfail\n");
@files = readdir(d); closedir(d);
print "(\n";
foreach $f (@files) {
  ($p = $f) =~ s/\"/\\\"/g;
  ($q = "$dir/$f") =~ s/\"/\\\"/g;
  print "(",
    ((-d "$q") ? "\"$p/\" \"$q\" t" : "\"$p\" \"$q\" nil"),
    ((-e "$q") ? " t" : " nil"),
    ((-r "$q") ? " t" : " nil"),
    ")\n";
}
print ")\n";
' "$1" 2>/dev/null
} 2>/dev/null; echo tramp_exit_status $?





18:52:25.142228 tramp-send-command (6) # ( cd /home/jammy/project/ && unset GIT_DIR && env INSIDE_EMACS\=31.0.50\,tramp\:2.8.0-pre GIT_LITERAL_PATHSPECS\=1 GIT_OPTIONAL_LOCKS\=0 git --no-pager ls-tree --name-only -z HEAD -- project-todo.org </dev/null 2>/dev/null; echo tramp_exit_status $? )









What is `uncompface` that it tries to execute?
lone `nil` text in *Messages* and vc refresh error, the tramp logs for these lines in *Messages*:
File is missing: /podmancp:jammy@jam-zevem:/home/jammy/project/.gitmodules
nil

Tramp: Inserting ‘/podmancp:jammy@jam-zevem:/home/jammy/project/project-todo.org’...done
End of file during parsing: End of file during parsing,

VC refresh error: (end-of-file "")

Tramp: Checking ‘vc-registered’ for /podmancp:jammy@jam-zevem:/home/jammy/project/project-todo.org...done


Appear to be:
18:07:54.913758 tramp-send-command (6) # tramp_bundle_read_file_names <<'e7381d37826e413f7338377bdf35cb06' 2>/dev/null; echo tramp_exit_status $?
/home/jammy/project/build.zig
/home/jammy/project/.git
/home/jammy
/home/jammy/.git
/.git
e7381d37826e413f7338377bdf35cb06
18:07:54.974272 tramp-wait-for-regexp (6) #
(
("/home/jammy/project/build.zig" t t nil)
("/home/jammy/project/.git" t t t)
("/home/jammy" t t t)
("/home/jammy/.git" nil nil nil)
("/.git" nil nil nil)
)
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:07:54.976193 tramp-send-command (6) # test -d /home/jammy/project 2>/dev/null; echo tramp_exit_status $?
18:07:54.977196 tramp-wait-for-regexp (6) #
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:07:54.977565 tramp-send-command (6) # test -r /home/jammy/project/ 2>/dev/null; echo tramp_exit_status $?
18:07:54.978462 tramp-wait-for-regexp (6) #
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:07:54.979600 tramp-send-command (6) # ( cd /home/jammy/project/ && unset GIT_DIR && env INSIDE_EMACS\=31.0.50\,tramp\:2.8.0-pre GIT_LITERAL_PATHSPECS\=1 GIT_OPTIONAL_LOCKS\=0 git --no-pager ls-files -c -z -- build.zig </dev/null 2>/dev/null; echo tramp_exit_status $? )
18:07:54.986324 tramp-wait-for-regexp (6) #
build.zigtramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:07:54.987902 tramp-send-command (6) # ( cd /home/jammy/project/ && unset GIT_DIR && env INSIDE_EMACS\=31.0.50\,tramp\:2.8.0-pre GIT_LITERAL_PATHSPECS\=1 GIT_OPTIONAL_LOCKS\=0 git --no-pager status --porcelain -z --untracked-files --ignored -- build.zig </dev/null 2>/dev/null; echo tramp_exit_status $? )
18:07:54.999060 tramp-wait-for-regexp (6) #
 M build.zigtramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:07:54.999826 tramp-send-command (6) # ( cd /home/jammy/project/ && unset GIT_DIR && env INSIDE_EMACS\=31.0.50\,tramp\:2.8.0-pre GIT_LITERAL_PATHSPECS\=1 GIT_OPTIONAL_LOCKS\=0 git --no-pager rev-parse HEAD </dev/null 2>/dev/null; echo tramp_exit_status $? )
18:07:55.007882 tramp-wait-for-regexp (6) #
47266d8c0325949983854befec584523792ca0ff
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:07:55.008593 tramp-send-command (6) # ( cd /home/jammy/project/ && unset GIT_DIR && env INSIDE_EMACS\=31.0.50\,tramp\:2.8.0-pre GIT_LITERAL_PATHSPECS\=1 GIT_OPTIONAL_LOCKS\=0 git --no-pager symbolic-ref HEAD </dev/null 2>/dev/null; echo tramp_exit_status $? )
18:07:55.016174 tramp-wait-for-regexp (6) #
refs/heads/master
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
---FOR JORDAN: Why is tramp sending this command, why is `nil` not captured by TRAMP?
--It wants to know if /home/jammy/project is a symbolic link, but why?
18:07:57.201283 tramp-send-command (6) # (if test -h "/home/jammy/project/"; then echo t; else echo nil; fi) && \readlink --canonicalize-missing /home/jammy/project/ 2>/dev/null; echo tramp_exit_status $?
18:07:57.221485 tramp-wait-for-regexp (6) #
nil
/home/jammy/project
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:07:57.222096 tramp-do-file-attributes-with-stat (5) # file attributes with stat: /home/jammy/project/
18:07:57.222283 tramp-send-command (6) # tramp_stat_file_attributes /home/jammy/project/ 2>/dev/null; echo tramp_exit_status $?
18:07:57.244174 tramp-wait-for-regexp (6) #
(("‘/home/jammy/project/’") 18 ("jammy" . 501) ("nobody" . 65534) 1737190886 1737190886 1737190886 576 "drwxr-xr-x" t 14741195 -1)
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
--FOR JORDAN: Why is tramp trying to insert .gitmodules, is this vc.el doing weirdo shit or something?
18:07:57.306162 tramp-handle-insert-file-contents (3) # Inserting ‘/podmancp:jammy@jam-zevem:/home/jammy/project/.gitmodules’...
18:07:57.310576 tramp-send-command (6) # (if test -h "/home/jammy/project/.gitmodules"; then echo t; else echo nil; fi) && \readlink --canonicalize-missing /home/jammy/project/.gitmodules 2>/dev/null; echo tramp_exit_status $?
18:07:57.322958 tramp-wait-for-regexp (6) #
nil
/home/jammy/project/.gitmodules
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:07:57.323568 tramp-do-file-attributes-with-stat (5) # file attributes with stat: /home/jammy/project/.gitmodules
18:07:57.323693 tramp-send-command (6) # tramp_stat_file_attributes /home/jammy/project/.gitmodules 2>/dev/null; echo tramp_exit_status $?
18:07:57.342970 tramp-wait-for-regexp (6) #
nil
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:07:57.343297 tramp-sh-handle-file-local-copy (1) # error: ""
nil
18:07:57.343574 tramp-sh-handle-file-local-copy (1) # File is missing: /podmancp:jammy@jam-zevem:/home/jammy/project/.gitmodules
nil
18:07:57.343654 tramp-handle-insert-file-contents (3) # Inserting ‘/podmancp:jammy@jam-zevem:/home/jammy/project/.gitmodules’...failed
18:07:57.346150 tramp-handle-insert-file-contents (1) # File is missing: /podmancp:jammy@jam-zevem:/home/jammy/project/.gitmodules
nil
18:07:57.354952 tramp-handle-insert-file-contents (1) # File is missing: /podmancp:jammy@jam-zevem:/home/jammy/project/.gitmodules
nil
18:07:57.356977 tramp-send-command (6) # ( cd /home/jammy/project/ && unset GIT_DIR && env INSIDE_EMACS\=31.0.50\,tramp\:2.8.0-pre LC_MESSAGES\=C git --no-pager ls-files -z -c --exclude-standard --sparse -o </dev/null; echo tramp_exit_status $? )
18:07:57.392766 tramp-wait-for-regexp (6) #
///94b4655c39f14eb594acd8c8e974e8cd#$
18:07:59.917603 tramp-send-command (6) # tramp_bundle_read_file_names <<'e7381d37826e413f7338377bdf35cb06' 2>/dev/null; echo tramp_exit_status $?
/home/jammy/project/build.zig
/home/jammy/project/.git
/home/jammy
/home/jammy/.git
/.git
e7381d37826e413f7338377bdf35cb06
18:07:59.970888 tramp-wait-for-regexp (6) #
(
("/home/jammy/project/build.zig" t t nil)
("/home/jammy/project/.git" t t t)
("/home/jammy" t t t)
("/home/jammy/.git" nil nil nil)
("/.git" nil nil nil)
)
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:07:59.972690 tramp-send-command (6) # test -d /home/jammy/project 2>/dev/null; echo tramp_exit_status $?
18:07:59.973805 tramp-wait-for-regexp (6) #
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:07:59.974197 tramp-send-command (6) # test -r /home/jammy/project/ 2>/dev/null; echo tramp_exit_status $?
18:07:59.975137 tramp-wait-for-regexp (6) #
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:07:59.976377 tramp-send-command (6) # ( cd /home/jammy/project/ && unset GIT_DIR && env INSIDE_EMACS\=31.0.50\,tramp\:2.8.0-pre GIT_LITERAL_PATHSPECS\=1 GIT_OPTIONAL_LOCKS\=0 git --no-pager ls-files -c -z -- build.zig </dev/null 2>/dev/null; echo tramp_exit_status $? )
18:07:59.984180 tramp-wait-for-regexp (6) #
build.zigtramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:07:59.985826 tramp-send-command (6) # ( cd /home/jammy/project/ && unset GIT_DIR && env INSIDE_EMACS\=31.0.50\,tramp\:2.8.0-pre GIT_LITERAL_PATHSPECS\=1 GIT_OPTIONAL_LOCKS\=0 git --no-pager status --porcelain -z --untracked-files --ignored -- build.zig </dev/null 2>/dev/null; echo tramp_exit_status $? )
18:07:59.996906 tramp-wait-for-regexp (6) #
 M build.zigtramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:07:59.997682 tramp-send-command (6) # ( cd /home/jammy/project/ && unset GIT_DIR && env INSIDE_EMACS\=31.0.50\,tramp\:2.8.0-pre GIT_LITERAL_PATHSPECS\=1 GIT_OPTIONAL_LOCKS\=0 git --no-pager rev-parse HEAD </dev/null 2>/dev/null; echo tramp_exit_status $? )
18:08:00.005694 tramp-wait-for-regexp (6) #
47266d8c0325949983854befec584523792ca0ff
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:08:00.006383 tramp-send-command (6) # ( cd /home/jammy/project/ && unset GIT_DIR && env INSIDE_EMACS\=31.0.50\,tramp\:2.8.0-pre GIT_LITERAL_PATHSPECS\=1 GIT_OPTIONAL_LOCKS\=0 git --no-pager symbolic-ref HEAD </dev/null 2>/dev/null; echo tramp_exit_status $? )
18:08:00.013911 tramp-wait-for-regexp (6) #
refs/heads/master
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:08:03.931978 tramp-send-command (6) # test -d /home/jammy/project/project-todo.org 2>/dev/null; echo tramp_exit_status $?
18:08:03.939407 tramp-wait-for-regexp (6) #
tramp_exit_status 1
///94b4655c39f14eb594acd8c8e974e8cd#$
18:08:03.940345 tramp-send-command (6) # (if test -h "/home/jammy/project/project-todo.org"; then echo t; else echo nil; fi) && \readlink --canonicalize-missing /home/jammy/project/project-todo.org 2>/dev/null; echo tramp_exit_status $?
18:08:03.956192 tramp-wait-for-regexp (6) #
nil
/home/jammy/project/project-todo.org
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:08:03.956991 tramp-do-file-attributes-with-stat (5) # file attributes with stat: /home/jammy/project/project-todo.org
18:08:03.957199 tramp-send-command (6) # tramp_stat_file_attributes /home/jammy/project/project-todo.org 2>/dev/null; echo tramp_exit_status $?
18:08:03.975846 tramp-wait-for-regexp (6) #
(("‘/home/jammy/project/project-todo.org’") 1 ("jammy" . 501) ("nobody" . 65534) 1734160437 1734160437 1734160437 0 "-rw-r--r--" t 14753690 -1)
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:08:03.977813 tramp-handle-insert-file-contents (3) # Inserting ‘/podmancp:jammy@jam-zevem:/home/jammy/project/project-todo.org’...
18:08:03.981640 tramp-handle-insert-file-contents (3) # Inserting ‘/podmancp:jammy@jam-zevem:/home/jammy/project/project-todo.org’...done
18:08:03.982978 tramp-do-file-attributes-with-stat (5) # file attributes with stat: /home/jammy/project/project-todo.org
18:08:03.983119 tramp-send-command (6) # tramp_stat_file_attributes /home/jammy/project/project-todo.org 2>/dev/null; echo tramp_exit_status $?
18:08:03.996119 tramp-wait-for-regexp (6) #
(("‘/home/jammy/project/project-todo.org’") 1 ("jammy" . 501) ("nobody" . 65534) 1734160437 1734160437 1734160437 0 "-rw-r--r--" t 14753690 -1)
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:08:04.779999 tramp-send-command (6) # ( cd /home/jammy/project/ && env INSIDE_EMACS\=31.0.50\,tramp\:2.8.0-pre /bin/sh -c uncompface </dev/null; echo tramp_exit_status $? )
18:08:04.800194 tramp-wait-for-regexp (6) #
/bin/sh: line 1: uncompface: command not found
tramp_exit_status 127
///94b4655c39f14eb594acd8c8e974e8cd#$
18:08:04.929145 tramp-send-command (6) # test -e /home/jammy/project/project-todo.org 2>/dev/null; echo tramp_exit_status $?
18:08:04.930612 tramp-send-command (6) # tramp_bundle_read_file_names <<'e7381d37826e413f7338377bdf35cb06' 2>/dev/null; echo tramp_exit_status $?
/home/jammy/project/build.zig
/home/jammy/project/.git
/home/jammy
/home/jammy/.git
/.git
e7381d37826e413f7338377bdf35cb06
18:08:04.930967 tramp-wait-for-regexp (6) #
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:08:04.931090 tramp-bundle-read-file-names (1) # End of file during parsing: End of file during parsing,
18:08:04.976428 tramp-wait-for-regexp (6) #
(
("/home/jammy/project/build.zig" t t nil)
("/home/jammy/project/.git" t t t)
("/home/jammy" t t t)
("/home/jammy/.git" nil nil nil)
("/.git" nil nil nil)
)
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:08:04.976882 tramp-do-file-attributes-with-stat (5) # file attributes with stat: /home/jammy/project/project-todo.org
18:08:04.977042 tramp-send-command (6) # tramp_stat_file_attributes /home/jammy/project/project-todo.org 2>/dev/null; echo tramp_exit_status $?
18:08:04.986392 tramp-wait-for-regexp (6) #
(("‘/home/jammy/project/project-todo.org’") 1 ("jammy" . 501) ("nobody" . 65534) 1734160437 1734160437 1734160437 0 "-rw-r--r--" t 14753690 -1)
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:08:04.999333 tramp-sh-handle-vc-registered (3) # Checking ‘vc-registered’ for /podmancp:jammy@jam-zevem:/home/jammy/project/project-todo.org...
18:08:05.005068 tramp-send-command (6) # tramp_bundle_read_file_names <<'e7381d37826e413f7338377bdf35cb06' 2>/dev/null; echo tramp_exit_status $?
/home/jammy/project/project-todo.org
/home/jammy/project/.git
/home/jammy
/home/jammy/.git
/.git
e7381d37826e413f7338377bdf35cb06
18:08:05.031867 tramp-wait-for-regexp (6) #
(
("/home/jammy/project/project-todo.org" t t nil)
("/home/jammy/project/.git" t t t)
("/home/jammy" t t t)
("/home/jammy/.git" nil nil nil)
("/.git" nil nil nil)
)
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:08:05.033491 tramp-send-command (6) # test -d /home/jammy/project 2>/dev/null; echo tramp_exit_status $?
18:08:05.034439 tramp-wait-for-regexp (6) #
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:08:05.034724 tramp-send-command (6) # test -r /home/jammy/project/ 2>/dev/null; echo tramp_exit_status $?
18:08:05.035616 tramp-wait-for-regexp (6) #
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:08:05.036587 tramp-send-command (6) # ( cd /home/jammy/project/ && unset GIT_DIR && env INSIDE_EMACS\=31.0.50\,tramp\:2.8.0-pre GIT_LITERAL_PATHSPECS\=1 git --no-pager ls-files -c -z -- project-todo.org </dev/null 2>/dev/null; echo tramp_exit_status $? )
18:08:05.043148 tramp-wait-for-regexp (6) #
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:08:05.043795 tramp-send-command (6) # ( cd /home/jammy/project/ && unset GIT_DIR && env INSIDE_EMACS\=31.0.50\,tramp\:2.8.0-pre GIT_LITERAL_PATHSPECS\=1 git --no-pager ls-tree --name-only -z HEAD -- project-todo.org </dev/null 2>/dev/null; echo tramp_exit_status $? )
18:08:05.054050 tramp-wait-for-regexp (6) #
tramp_exit_status 0
///94b4655c39f14eb594acd8c8e974e8cd#$
18:08:05.054335 tramp-sh-handle-vc-registered (3) # Checking ‘vc-registered’ for /podmancp:jammy@jam-zevem:/home/jammy/project/project-todo.org...done
-- END





------ONE
2%  - vc-working-revision
          56   2%   - vc-call-backend
          56   2%    - vc-git-working-revision
          56   2%     - vc-git--rev-parse
          56   2%      - vc-git--out-ok
          56   2%       - vc-git--call
          56   2%        - process-file
          56   2%         - tramp-file-name-handler
          56   2%          - apply
          56   2%           - tramp-sh-file-name-handler
          56   2%            - tramp-sh-handle-process-file
          55   2%             - tramp-send-command-and-check
          55   2%              - tramp-send-command
          51   2%               - tramp-wait-for-output
          51   2%                - tramp-wait-for-regexp
          31   1%                 - tramp-accept-process-output
          31   1%                    accept-process-output
          20   0%                   sit-for
           4   0%               - tramp-message
           4   0%                - apply
           4   0%                 - tramp-debug-message
           4   0%                    write-region
           1   0%             - expand-file-name
           1   0%              - tramp-file-name-handler
           1   0%               - apply
           1   0%                - tramp-sh-file-name-handler
           1   0%                 - tramp-sh-handle-expand-file-name
           1   0%                  - tramp-drop-volume-letter
           1   0%                   - replace-regexp-in-string
           1   0%                      concat
           1
------/




-----TWO
         - vc-mode-line
          52   2%             - vc-call-backend
          52   2%              - vc-git-mode-line-string
          52   2%               - vc-git--symbolic-ref
          52   2%                - vc-git--run-command-string
          51   2%                 - vc-git--out-ok
          51   2%                  - vc-git--call
          51   2%                   - process-file
          51   2%                    - tramp-file-name-handler
          51   2%                     - apply
          51   2%                      - tramp-sh-file-name-handler
          51   2%                       - tramp-sh-handle-process-file
          51   2%                        - tramp-send-command-and-check
          49   2%                         - tramp-send-command
          45   2%                          - tramp-wait-for-output
          45   2%                           - tramp-wait-for-regexp
          28   1%                            - tramp-accept-process-output
          28   1%                               accept-process-output
          14   0%                              sit-for
           3   0%                            - tramp-message
           3   0%                             - apply
           3   0%                              - tramp-debug-message
           3   0%                                 write-region
           4   0%                          - tramp-message
           4   0%                           - apply
           4   0%                            - tramp-debug-message
           4   0%                               write-region
           1   0%
------/




------THREE
       - vc-call-backend
          85   4%             - vc-git-find-file-hook
          85   4%              - vc-state
          85   4%               - vc-state-refresh
          85   4%                - vc-call-backend
          85   4%                 - vc-git-state
          85   4%                  - vc-git--run-command-string
          81   3%                   - vc-git--out-ok
          81   3%                    - vc-git--call
          81   3%                     - process-file
          81   3%                      - tramp-file-name-handler
          81   3%                       - apply
          81   3%                        - tramp-sh-file-name-handler
          81   3%                         - tramp-sh-handle-process-file
          81   3%                          - tramp-send-command-and-check
          81   3%                           - tramp-send-command
          79   3%                            - tramp-wait-for-output
          79   3%                             - tramp-wait-for-regexp
          54   2%                              - tramp-accept-process-output
          54   2%                               - accept-process-output
           1   0%                                  syntax-ppss-flush-cache
          25   1%                                sit-for
           2   0%                            - tramp-message
           2   0%                             - apply
           2   0%                              - tramp-debug-message
           2   0%
-----/



-----FOUR
         - tramp-run-real-handler
         179   8%                   - vc-registered
         177   8%                    - mapc
         177   8%                     - #<byte-code-function 6D0>
         177   8%                      - vc-call-backend
         177   8%                       - vc-git-registered
         144   7%                        - vc-git--out-ok
         144   7%                         - vc-git--call
         144   7%                          - process-file
         144   7%                           - tramp-file-name-handler
         144   7%                            - apply
         144   7%                             - tramp-sh-file-name-handler
         144   7%                              - tramp-sh-handle-process-file
         143   6%                               - tramp-send-command-and-check
         143   6%                                - tramp-send-command
         134   6%                                 - tramp-wait-for-output
         134   6%                                  - tramp-wait-for-regexp
          71   3%                                   - tramp-accept-process-output
          71   3%                                      accept-process-output
          60   2%                                     sit-for
           2   0%                                   - tramp-message
           2   0%                                    - apply
           2   0%                                     - tramp-debug-message
           2   0%                                        write-region
           1   0%                                   - tramp-check-for-regexp
           1   0%                                      tramp-search-regexp
           9   0%                                 - tramp-message
           9   0%                                  - apply
           9   0%                                   - tramp-debug-message
           6   0%                                      write-region
           2   0%                                      whitespace--update-bob-eob
           1   0%                                    - tramp-get-debug-buffer
           1   0%                                     - tramp-debug-buffer-name
           1   0%
--------/





------FIVE
- timer-event-handler
         793  38%  - apply
         791  38%   - auto-revert-buffers
         791  38%    - apply
         791  38%     - auto-revert-buffers@buffer-list-filter
         791  38%      - if
         791  38%       - funcall
         791  38%        - #<native-comp-function auto-revert-buffers>
         784  38%         - auto-revert-buffer
         784  38%          - auto-revert-handler
         784  38%           - vc-refresh-state
         647  31%            - vc-backend
         646  31%             - vc-registered
         642  31%              - tramp-file-name-handler
         642  31%               - apply
         642  31%                - tramp-sh-file-name-handler
         642  31%                 - tramp-sh-handle-vc-registered
         463  22%                  - tramp-bundle-read-file-names
         463  22%                   - tramp-send-command-and-check
         463  22%                    - tramp-send-command
         454  22%                     - tramp-wait-for-output
         454  22%                      - tramp-wait-for-regexp
         266  12%                       - tramp-accept-process-output
         261  12%                          accept-process-output
           2   0%                        - tramp-get-connection-property
           1   0%                           tramp-file-name-unify
           1   0%                        - #<byte-code-function EF0>
           1   0%                         - tramp-flush-connection-property
           1   0%                            tramp-get-hash-table
         182   8%                         sit-for
           5   0%                       - tramp-check-for-regexp
           5   0%                          tramp-search-regexp
           1   0%                       - tramp-message
           1   0%                        - apply
           1   0%                         - tramp-debug-message
           1   0%                            write-region
           8   0%                     - tramp-message
           8   0%                      - apply
           8   0%                       - tramp-debug-message
           7   0%                        - write-region
           5   0%                         - select-safe-coding-system
           5   0%                          - find-auto-coding
           5   0%                             auto-coding-alist-lookup
           1   0%                     - tramp-maybe-open-connection
           1   0%                      - tramp-get-connection-process
           1   0%                       - tramp-get-connection-name
           1   0%                        - tramp-buffer-name
           1   0%                           tramp-file-name-host-port
         179   8%
---------/



tramp-list-connections
  tramp-compat-seq-keep    apply fun to seq and return non-nil results
    fun: the lambda defined there
    seq: (hash-table-keys tramp-cache-data)



tramp-vc-registered-file-names
